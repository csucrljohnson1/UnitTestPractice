        -:    0:Source:Password.cpp
        -:    0:Graph:Password.gcno
        -:    0:Data:Password.gcda
        -:    0:Runs:1
        -:    1:#include "Password.h"
        -:    2:#include <string>
        -:    3:
        -:    4:using std::string;
        -:    5:
        -:    6:/*
        -:    7:  The function receives a string counts how many times the same character 
        -:    8:  occurs at the beginning of the string, before any other characters (or the
        -:    9:  end of the string). The function is case-sensitive so 'Z' is different than
        -:   10:  'z' and any ASCII characters are allowed.
        -:   11:*/
function _ZN8Password24count_leading_charactersENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 11 returned 100% blocks executed 100%
       11:   12:int Password::count_leading_characters(string phrase){
       11:   13:  int repetition = 0;
       11:   14:  int index = 0;
       11:   15:  if(phrase.length() > 0){
call    0 returned 11
branch  1 taken 10 (fallthrough)
branch  2 taken 1
       10:   16:    repetition++;
        -:   17:  }
        -:   18:
       73:   19:  while( index < phrase.length()-1 && phrase[index] == phrase[index+1] ){
call    0 returned 73
branch  1 taken 69 (fallthrough)
branch  2 taken 4
call    3 returned 69
call    4 returned 69
branch  5 taken 62 (fallthrough)
branch  6 taken 7
branch  7 taken 62
branch  8 taken 11 (fallthrough)
       62:   20:    repetition++;
       62:   21:    index++;
        -:   22:  }
       11:   23:  return repetition;
        -:   24:}
        -:   25:
function _ZN8Password14has_mixed_caseENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 9 returned 100% blocks executed 100%
        9:   26:bool Password::has_mixed_case(string phrase){
        9:   27: bool upper=false;
        9:   28: bool lower=false;
      115:   29:  for(int i=0; i<phrase.length();i++){
call    0 returned 115
branch  1 taken 106
branch  2 taken 9 (fallthrough)
      106:   30:      if(phrase.at(i) >='A' && phrase.at(i) <= 'Z'){
call    0 returned 106
branch  1 taken 78 (fallthrough)
branch  2 taken 28
call    3 returned 78
branch  4 taken 13 (fallthrough)
branch  5 taken 65
branch  6 taken 13 (fallthrough)
branch  7 taken 93
       13:   31:        upper = true;
        -:   32:      } 
      106:   33:      if(phrase.at(i) >='a' && phrase.at(i) <= 'z'){
call    0 returned 106
branch  1 taken 65 (fallthrough)
branch  2 taken 41
call    3 returned 65
branch  4 taken 65 (fallthrough)
branch  5 taken 0
branch  6 taken 65 (fallthrough)
branch  7 taken 41
       65:   34:        lower = true;
        -:   35:      }
        -:   36:     }
        9:   37:  if(upper == true && lower == true){
branch  0 taken 6 (fallthrough)
branch  1 taken 3
branch  2 taken 5 (fallthrough)
branch  3 taken 1
        5:   38:    return true;
        -:   39:  }
        -:   40:  else{
        4:   41:    return false;
        -:   42:  }
        -:   43:}
        -:   44:
        -:   45:/*
        -:   46: constructor sets the default password to "ChicoCA-95929"
        -:   47: */
function _ZN8PasswordC2Ev called 16 returned 100% blocks executed 50%
       16:   48:Password::Password() {
call    0 returned 16
call    1 returned 16
       16:   49:    pass_history.push_back("ChicoCA-95929");
call    0 returned 16
call    1 returned 16
branch  2 taken 16 (fallthrough)
branch  3 taken 0 (throw)
call    4 returned 16
branch  5 taken 16 (fallthrough)
branch  6 taken 0 (throw)
call    7 returned 16
call    8 returned 16
call    9 never executed
call   10 never executed
       16:   50:}
call    0 never executed
call    1 never executed
        -:   51:
        -:   52:/*
        -:   53:receives a password and sets the latest in pass_history to it if and only
        -:   54:if it meets all criteria:
        -:   55:  1. The password is at least 8 letters long, but no longer than 20
        -:   56:  2. It has no more than 3 of the same leading characters
        -:   57:  3. It has mixed case (at least one upper case and at least one lower case)
        -:   58:  4. It was not a previous password in the history
        -:   59:*/
function _ZN8Password3setENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 3 returned 100% blocks executed 78%
        3:   60:void Password::set(string phrase) {
       3*:   61:    if(phrase.length() >=8 && phrase.length() <= 20 && count_leading_characters(phrase) <= 3 && has_mixed_case(phrase) == true){
call    0 returned 3
branch  1 taken 3 (fallthrough)
branch  2 taken 0
call    3 returned 3
branch  4 taken 3 (fallthrough)
branch  5 taken 0
call    6 returned 3
branch  7 taken 3 (fallthrough)
branch  8 taken 0 (throw)
call    9 returned 3
branch 10 taken 3 (fallthrough)
branch 11 taken 0 (throw)
branch 12 taken 3 (fallthrough)
branch 13 taken 0
call   14 returned 3
branch 15 taken 3 (fallthrough)
branch 16 taken 0 (throw)
call   17 returned 3
branch 18 taken 3 (fallthrough)
branch 19 taken 0 (throw)
branch 20 taken 3 (fallthrough)
branch 21 taken 0
branch 22 taken 3 (fallthrough)
branch 23 taken 0
call   24 returned 3
branch 25 taken 3 (fallthrough)
branch 26 taken 0
call   27 returned 3
branch 28 taken 3 (fallthrough)
branch 29 taken 0
branch 30 never executed
branch 31 never executed
call   32 never executed
branch 33 never executed
branch 34 never executed
call   35 never executed
        7:   62:        for(int i=0;i<pass_history.size();i++){
call    0 returned 7
branch  1 taken 7
branch  2 taken 0 (fallthrough)
        7:   63:            if(pass_history[i] == phrase){
call    0 returned 7
call    1 returned 7
branch  2 taken 3 (fallthrough)
branch  3 taken 4
        3:   64:                break;
        -:   65:            }
        -:   66:            else{
        4:   67:                password = phrase;
call    0 returned 4
        4:   68:                pass_history.emplace_back(password);
call    0 returned 4
        -:   69:            }
        -:   70:        }
        -:   71:    }
        3:   72:}
        -:   73:
        -:   74:/*
        -:   75:receives a string and authenticates it against the latest password in the
        -:   76:pass_history, returning true for an exact match or false when it does not match
        -:   77:or if a password has not been set.
        -:   78:*/
function _ZN8Password12authenticateENSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE called 2 returned 100% blocks executed 100%
        2:   79:bool Password::authenticate(string pass){
        2:   80:   if(pass.size() >=8 && pass.size() <=20 && pass_history.size() > 0 && pass_history[pass_history.size() - 1] == pass) {
call    0 returned 2
branch  1 taken 2 (fallthrough)
branch  2 taken 0
call    3 returned 2
branch  4 taken 2 (fallthrough)
branch  5 taken 0
call    6 returned 2
branch  7 taken 2 (fallthrough)
branch  8 taken 0
call    9 returned 2
call   10 returned 2
call   11 returned 2
branch 12 taken 1 (fallthrough)
branch 13 taken 1
branch 14 taken 1 (fallthrough)
branch 15 taken 1
        1:   81:           return true;
        -:   82:       }
        -:   83:   else {
        1:   84:           return false;
        -:   85:       }
        -:   86:}
        -:   87:
        -:   88:
        -:   89:
        -:   90:
        -:   91:
        -:   92:
        -:   93:
        -:   94:
        -:   95:
        -:   96:
        -:   97:
        -:   98:
        -:   99:
        -:  100:
        -:  101:
        -:  102:/*
        -:  103:// Implementation A
        -:  104:#include <cctype>
        -:  105:bool Password::has_mixed_case(string str)
        -:  106:{
        -:  107:  bool has_lower = false;
        -:  108:  bool has_upper = false;
        -:  109:  for (char ch : str)
        -:  110:  {
        -:  111:    if (std::islower(ch))
        -:  112:    {
        -:  113:      has_lower = true;
        -:  114:    }
        -:  115:    else if (std::isupper(ch))
        -:  116:    {
        -:  117:      has_upper = true;
        -:  118:    }
        -:  119:  }
        -:  120:  return has_lower && has_upper;
        -:  121:}
        -:  122:
        -:  123:
        -:  124:// Implementation B
        -:  125:bool Password::has_mixed_case(string str)
        -:  126:{
        -:  127:  int count_lower = 0;
        -:  128:  for (int i = 0; i < str.length(); i++)
        -:  129:  {
        -:  130:    if (str[i] >= 'a' && str[i] <= 'z')
        -:  131:    {
        -:  132:      count_lower++;
        -:  133:    }
        -:  134:  }
        -:  135:  return count_lower > 0 && count_lower < str.length();
        -:  136:}
        -:  137:
        -:  138:// Implementation C
        -:  139:bool Password::has_mixed_case(string str)
        -:  140:{
        -:  141:  bool lower = false;
        -:  142:  bool upper = false;
        -:  143:  for (int i = 0; i < str.length(); i++)
        -:  144:  {
        -:  145:    if (str[i] >= 'a' && str[i] <= 'z')
        -:  146:    {
        -:  147:      lower = true;
        -:  148:    }
        -:  149:    else if (str[i] >= 'A' && str[i] <= 'Z')
        -:  150:    {
        -:  151:      upper = true;
        -:  152:    }
        -:  153:  }
        -:  154:  return upper && lower;
        -:  155:}
        -:  156:
        -:  157:// Implementation D
        -:  158:#include <cctype>
        -:  159:bool Password::has_mixed_case(string str)
        -:  160:{
        -:  161:  bool is_lower = false;
        -:  162:  bool is_upper = false;
        -:  163:  for (char c : str)
        -:  164:  {
        -:  165:    if (std::islower(c))
        -:  166:    {
        -:  167:      is_lower = true;
        -:  168:    }
        -:  169:    else
        -:  170:    {
        -:  171:      is_upper = true;
        -:  172:    }
        -:  173:  }
        -:  174:  return is_lower && is_upper;
        -:  175:}
        -:  176:*/
        -:  177:// Implementation E
        -:  178://bool Password::has_mixed_case(string str)
        -:  179://{
        -:  180://  bool found = false;
        -:  181://  for(char c : str){
        -:  182://    if( !found && c >= 'A' && c <= 'Z' ){
        -:  183://      found = true;
        -:  184://    }
        -:  185://    else if( found && c >= 'a' && c <= 'z'){
        -:  186://      return true;
        -:  187://    }
        -:  188://  }
        -:  189://  return false;
        -:  190://}
        -:  191:
